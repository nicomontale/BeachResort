{"ast":null,"code":"import _defineProperty from \"/Users/nicolamontaleone/Desktop/React/BeachResort/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nvar _jsxFileName = \"/Users/nicolamontaleone/Desktop/React/BeachResort/src/context.js\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport React, { Component } from 'react';\nimport items from './data';\nconst RoomContext = React.createContext(); //<RoomContext.Provider value={'hello'}\n\nexport default class RoomProvider extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      rooms: [],\n      sortedRomm: [],\n      featuredRooms: [],\n      loading: false,\n      type: 'all',\n      //searching\n      capacity: 1,\n      price: 0,\n      minPrice: 0,\n      maxSize: 0,\n      maxPrice: 0,\n      minSize: 0,\n      breakfast: false,\n      pets: false\n    };\n\n    this.getRoom = slug => {\n      let tempRooms = [...this.state.rooms];\n      const room = tempRooms.find(room => room.slug === slug);\n      return room;\n    };\n\n    this.handleChange = event => {\n      const target = event.target;\n      const value = target.type === 'checkbox' ? target.checked : target.value;\n      const name = event.target.name;\n      this.setState({\n        [name]: value\n      }, this.filterRoom);\n    };\n\n    this.filterRoom = () => {\n      let _this$state = this.state,\n          rooms = _this$state.rooms,\n          type = _this$state.type,\n          capacity = _this$state.capacity,\n          price = _this$state.price,\n          minPrice = _this$state.minPrice,\n          minSize = _this$state.minSize,\n          maxSize = _this$state.maxSize,\n          maxPrice = _this$state.maxPrice,\n          breakfast = _this$state.breakfast,\n          pets = _this$state.pets; //all the rooms\n\n      let tempRooms = [...rooms]; //transform value\n\n      capacity = parseInt(capacity);\n      price = parseInt(price); //filter by type\n\n      if (type !== 'all') {\n        tempRooms = tempRooms.filter(room => room.type === type);\n      } //filter by capacity\n\n\n      if (capacity !== 1) {\n        tempRooms = tempRooms.filter(room => room.capacity >= capacity);\n      } // filter by price\n\n\n      tempRooms = tempRooms.filter(room => room.price <= price); //filter by size\n\n      tempRooms = tempRooms.filter(room => room.size >= minSize && room.size <= maxSize); //filter by pets\n\n      if (pets) {\n        tempRooms = tempRooms.filter(room => room.pets === true);\n      } //filter by breakfast\n\n\n      if (breakfast) {\n        tempRooms = tempRooms.filter(room => room.breakfast === true);\n      }\n\n      this.setState({\n        sortedRomm: tempRooms\n      });\n    };\n  }\n\n  // function getData\n  componentDidMount() {\n    let rooms = this.formatData(items);\n    let featuredRooms = rooms.filter(room => room.featured === true);\n    let maxPrice = Math.max(...rooms.map(item => item.price));\n    let maxSize = Math.max(...rooms.map(item => item.size));\n    this.setState({\n      rooms,\n      featuredRooms,\n      sortedRomm: rooms,\n      loading: true,\n      maxPrice,\n      maxSize\n    });\n  }\n\n  formatData(items) {\n    let tempItems = items.map(item => {\n      let id = item.sys.id;\n      let images = item.fields.images.map(image => image.fields.file.url);\n\n      let room = _objectSpread({}, item.fields, {\n        images,\n        id\n      });\n\n      return room;\n    });\n    return tempItems;\n  }\n\n  render() {\n    return React.createElement(RoomContext.Provider, {\n      value: _objectSpread({}, this.state, {\n        getRoom: this.getRoom,\n        handleChange: this.handleChange\n      }),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 118\n      },\n      __self: this\n    }, this.props.children);\n  }\n\n}\nconst RoomConsumer = RoomContext.Consumer;\nexport function withRoomConsumer(Component) {\n  return function ConsumerWrapper(props) {\n    return React.createElement(RoomConsumer, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 134\n      },\n      __self: this\n    }, value => React.createElement(Component, Object.assign({}, props, {\n      context: value,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    })), \"}\");\n  };\n}\nexport { RoomConsumer, RoomProvider, RoomContext };","map":{"version":3,"sources":["/Users/nicolamontaleone/Desktop/React/BeachResort/src/context.js"],"names":["React","Component","items","RoomContext","createContext","RoomProvider","state","rooms","sortedRomm","featuredRooms","loading","type","capacity","price","minPrice","maxSize","maxPrice","minSize","breakfast","pets","getRoom","slug","tempRooms","room","find","handleChange","event","target","value","checked","name","setState","filterRoom","parseInt","filter","size","componentDidMount","formatData","featured","Math","max","map","item","tempItems","id","sys","images","fields","image","file","url","render","props","children","RoomConsumer","Consumer","withRoomConsumer","ConsumerWrapper"],"mappings":"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","sourcesContent":["import React, { Component } from 'react'\nimport items from './data';\nconst RoomContext = React.createContext();\n\n//<RoomContext.Provider value={'hello'}\nexport default class RoomProvider extends Component {\n    state = {\n        rooms: [],\n        sortedRomm: [],\n        featuredRooms: [],\n        loading: false,\n        type:'all', //searching\n            capacity:1,\n            price:0,\n            minPrice:0,\n            maxSize:0,\n            maxPrice:0,\n            minSize:0,\n            breakfast:false,\n            pets: false\n\n    }\n\n    // function getData\n    componentDidMount() {\n        let rooms = this.formatData(items);\n\n        let featuredRooms = rooms.filter(room => room.featured === true);\n        let maxPrice = Math.max(...rooms.map(item=> \n            item.price));\n         let maxSize = Math.max(...rooms.map(item=> \n                item.size));\n              \n\n        this.setState({\n            rooms,\n            featuredRooms,\n            sortedRomm: rooms,\n            loading: true,\n            maxPrice,\n            maxSize\n            \n        })\n    }\n\n    formatData(items) {\n        let tempItems = items.map(item => {\n            let id = item.sys.id;\n            let images = item.fields.images.map(image =>\n                image.fields.file.url);\n            let room = { ...item.fields, images, id };\n            return room;\n\n\n        });\n        return tempItems\n    }\n    getRoom = (slug) => {\n        let tempRooms = [...this.state.rooms];\n        const room = tempRooms.find(room => room.slug === slug);\n        return room;\n\n    }\n\n    handleChange = event => {\n        const target = event.target;\n        const value = target.type === 'checkbox' ? \n        target.checked:target.value\n        const name = event.target.name\n    \n       \n       this.setState({\n           [name] : value\n\n       }, this.filterRoom)\n        \n    };\n    filterRoom = ()=> {\n        let {\n            rooms, type, capacity, price, minPrice, minSize, maxSize, maxPrice, breakfast, pets\n        } = this.state;\n        //all the rooms\n        let tempRooms = [...rooms];\n        //transform value\n        capacity= parseInt(capacity);\n        price = parseInt(price);\n\n        //filter by type\n        if(type !=='all') {\n            tempRooms= tempRooms.filter(room => room.type ===type);\n        } \n        //filter by capacity\n\n        if(capacity!== 1) {\n            tempRooms= tempRooms.filter(room=> room.capacity >=capacity);\n        }\n\n        // filter by price\n        \n            tempRooms= tempRooms.filter(room=>room.price <=price);\n        //filter by size\n        tempRooms=tempRooms.filter(room => room.size>=minSize && room.size<=maxSize)\n\n        //filter by pets\n        if(pets) {\n            tempRooms=tempRooms.filter(room=> room.pets===true);\n        }\n        //filter by breakfast\n        if(breakfast) {\n            tempRooms=tempRooms.filter(room=> room.breakfast===true);\n        }\n\n        this.setState({\n            sortedRomm : tempRooms\n        })\n    }\n    render() {\n        return <RoomContext.Provider value={{ ...this.state, \n            getRoom: this.getRoom ,\n            handleChange: this.handleChange\n        \n        }}>\n            {this.props.children}\n\n        </RoomContext.Provider>\n\n\n    }\n}\nconst RoomConsumer = RoomContext.Consumer;\n\nexport function withRoomConsumer(Component){\n           return function ConsumerWrapper(props) {\n               return <RoomConsumer>\n               {value=> <Component {...props} context={value}/>}               \n                }\n               \n               </RoomConsumer>\n           }\n\n}\nexport { RoomConsumer, RoomProvider, RoomContext }"]},"metadata":{},"sourceType":"module"}